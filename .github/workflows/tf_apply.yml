name: "Apply Tf Plan"
on:
  workflow_call:
    inputs:
        path:
            description: 'Specifies the path of the root terraform module.'
            required: true
            type: string
        tf_version:
            description: 'Specifies version of Terraform to use. e.g: 1.1.0 Default=latest.'
            required: false
            type: string
            default: latest
        tf_vars_file:
            description: 'Specifies the Terraform TFVARS file.'
            required: false
            type: string
        region:
            description: 'Specifies the deployment region for the aws infrastructure'
            required: true
            type: string
        repository:
            description: 'name of the ecr repository'
            required: true
            type: string
    secrets:
        cli_config_credentials_token:
            description: 'cli config credentials token'
            required: true
        access_token:
            description: 'aws access key id'
            required: true
        secret_access_token:
            description: 'aws secret access key'
            required: true

jobs:
    Apply-plan:
        runs-on: ubuntu-latest
        outputs: 
            output1: ${{ steps.outcomes.outputs.test}}
            
        defaults: 
            run:
                shell: bash
                working-directory: ${{ inputs.path}}
        
        steps:
            - name: Checkout
              uses: actions/checkout@v3.5.3

            - name: setup terraform 
              uses: hashicorp/setup-terraform@v2.0.2
              with:
                terraform_version: ${{ inputs.tf_version }}
                cli_config_credentials_token: ${{ secrets.cli_config_credentials_token  }}
                terraform_wrapper: false
            
            - name: Terraform Init
              id: init
              run: terraform init
              
            - name: Terraform Validate
              id: validate
              run: terraform validate
    
            - name: Terraform Plan
              id: plan
              run: terraform plan
              continue-on-error: true
    
            - name: Terraform Plan Status
              if: steps.plan.outcome == 'failure'
              run: exit 1

            - name: Terraform Apply
              id: apply-run
              run: terraform apply -auto-approve
            
            # - name: Outputs
            #   id: outcomes
            #   run: |
            #     echo "test=$(terraform output -raw instance_id)" >> $GITHUB_OUTPUT
                

            # - name: print aws instance id
            #   run : |
            #       

    Build:
        runs-on: ubuntu-latest
        needs: Apply-plan
        steps:
            - uses: actions/checkout@v3
            - name : login to AWS
              uses : aws-actions/configure-aws-credentials@v1
              with: 
                aws-access-key-id: ${{ secrets.access_token }}
                aws-secret-access-key: ${{ secrets.secret_access_token }}
                aws-region: ${{ inputs.region }}

            - name: login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1

            - name: Build, tag, and push WEB image to amazon ecr
              id: build_web_image
              env:
                ECR_REGISTRY: ${{steps.login-ecr.outputs.registry}}
                ECR_REPOSITORY: ${{ inputs.repository }}
                IMAGE_TAG: ${{github.sha}}
              shell: bash
              run: |
                 docker build . -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
                 docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            
            


    Deploy:
        name: Deploy Dev
        needs: [Apply-plan,Build]
        runs-on: ubuntu-latest

        steps:
            - name: login to AWS
              uses : aws-actions/configure-aws-credentials@v1
              with: 
                aws-access-key-id: ${{ secrets.access_token }}
                aws-secret-access-key: ${{ secrets.secret_access_token }}
                aws-region: ${{ inputs.region }}
            - name: login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1

            - name: Reset WEB Container
              uses: peterkimzz/aws-ssm-send-command@master
              id: ssm-web-stop
              with:
                aws-region: ${{ inputs.region }}
                aws-access-key-id: ${{ secrets.access_token }}
                aws-secret-access-key: ${{ secrets.secret_access_token }}
                instance-ids: ${{ needs.Apply-plan.outputs.output1 }}
                working-directory: ""
                command: sudo docker stop $(docker ps -a -q) && sudo docker rm $(docker ps -a -q) && docker rmi -f $(docker images -aq)
                comment: Remove old WEB_DEV deployment
        
            - name: Run Application
              uses: peterkimzz/aws-ssm-send-command@master
              id: ssm-web
              with:
                aws-region: ${{ inputs.region }}
                aws-access-key-id: ${{ secrets.access_token}}
        
                aws-secret-access-key: ${{ secrets.secret_access_token }}
                instance-ids: ${{ needs.Apply-plan.outputs.output1 }}
                working-directory: ""
                command: sudo aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }} && sudo docker run -d -p 80:80 ${{steps.login-ecr.outputs.registry}}/${{inputs.repository}}:${{github.sha}}
                comment: Deploy WEB_DEV container